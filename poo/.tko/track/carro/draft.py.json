{
    "patches": [
        {
            "label": "2025-09-16_17-23-49",
            "content": "@@ -1,24 +0,0 @@\n-print (eu gosto de caju)\n",
            "lines": "0"
        },
        {
            "label": "2025-09-16_17-24-16",
            "content": "@@ -1,209 +1,24 @@\n-class Car:%0A    def __init__(self):%0A        # estado inicial conforme o enunciado%0A        self.passengers = 0%0A        self.km = 0%0A        self.passMax = 2%0A        self.gas = 0%0A        self.gasMax = 100%0A        \n+print (eu gosto de caju)\n",
            "lines": "1"
        },
        {
            "label": "2025-10-05_19-30-25",
            "content": "@@ -206,168 +206,4 @@\n     \n-%0A    def toString(self):%0A        # formato exigido pelos testes%0A        return %22pass: %22 + str(self.passengers) + %22, gas: %22 + str(self.gas) + %22, km: %22 + str(self.km)\n",
            "lines": "9"
        },
        {
            "label": "2025-10-05_19-30-56",
            "content": "@@ -194,17 +194,25 @@\n x = 100%0A\n+        \n %0A\n-\n     def \n@@ -266,16 +266,16 @@\n  testes%0A\n+\n         \n@@ -370,210 +370,4 @@\n .km)\n-def enter(self):%0A        # embarca uma pessoa se houver espa%C3%A7o%0A        if self.passengers %3C self.passMax:%0A            self.passengers += 1%0A        else:%0A            print(%22fail: limite de pessoas atingido%22)\n",
            "lines": "12"
        },
        {
            "label": "2025-10-05_19-31-26",
            "content": "@@ -358,22 +358,16 @@\n self.km)\n-%0A%0A    \n def ente\n@@ -568,425 +568,4 @@\n do%22)\n-%0A%0A    def leave(self):%0A        # desembarca uma pessoa se houver algu%C3%A9m%0A        if self.passengers %3E 0:%0A            self.passengers -= 1%0A        else:%0A            print(%22fail: nao ha ninguem no carro%22)%0A%0A    def fuel(self, amount):%0A        # abastece at%C3%A9 o m%C3%A1ximo; descarta o excesso%0A        if amount %3C 0:%0A            return%0A        self.gas += amount%0A        if self.gas %3E self.gasMax:%0A            self.gas = self.gasMax\n",
            "lines": "17"
        },
        {
            "label": "2025-10-05_19-32-25",
            "content": "@@ -995,1973 +995,4 @@\n sMax\n-%0A    def drive(self, distance):%0A        # dirigir s%C3%B3 se houver passageiros e combust%C3%ADvel%0A        if self.passengers == 0:%0A            print(%22fail: nao ha ninguem no carro%22)%0A            return%0A%0A        if self.gas == 0:%0A            print(%22fail: tanque vazio%22)%0A            return%0A%0A        # consumo: 1 litro por 1 km%0A        if self.gas %3E= distance:%0A            # consegue andar toda a dist%C3%A2ncia%0A            self.km += distance%0A            self.gas -= distance%0A        else:%0A            # anda o m%C3%A1ximo poss%C3%ADvel e zera o tanque%0A            went = self.gas%0A            self.km += went%0A            self.gas = 0%0A            print(%22fail: tanque vazio apos andar %22 + str(went) + %22 km%22)%0A%0A%0Adef main():%0A    car = Car()%0A    try:%0A        while True:%0A            line = input()%0A            if line is None:%0A                break%0A            line = line.strip()%0A            if line == %22%22:%0A                continue%0A%0A            # ecoa o comando como nos testes%0A            print(%22$%22 + line)%0A%0A            parts = line.split()%0A            cmd = parts%5B0%5D%0A%0A            if cmd == %22end%22:%0A                break%0A%0A            elif cmd == %22show%22:%0A                print(car.toString())%0A%0A            elif cmd == %22enter%22:%0A                car.enter()%0A%0A            elif cmd == %22leave%22:%0A                car.leave()%0A%0A            elif cmd == %22fuel%22:%0A                if len(parts) %3E= 2:%0A                    try:%0A                        amount = int(parts%5B1%5D)%0A                    except:%0A                        continue%0A                    car.fuel(amount)%0A%0A            elif cmd == %22drive%22:%0A                if len(parts) %3E= 2:%0A                    try:%0A                        dist = int(parts%5B1%5D)%0A                    except:%0A                        continue%0A                    car.drive(dist)%0A%0A            else:%0A                print(%22fail: comando invalido%22)%0A%0A    except EOFError:%0A        # encerra quando n%C3%A3o h%C3%A1 mais entrada (%C3%BAtil ao rodar testes)%0A        pass%0A%0A%0Aif __name__ == %22__main__%22:%0A    main()\n",
            "lines": "34"
        },
        {
            "label": "2025-10-05_19-32-46",
            "content": "class Car:\n    def __init__(self):\n        # estado inicial conforme o enunciado\n        self.passengers = 0\n        self.km = 0\n        self.passMax = 2\n        self.gas = 0\n        self.gasMax = 100\n\n    def toString(self):\n        # formato exigido pelos testes\n        return \"pass: \" + str(self.passengers) + \", gas: \" + str(self.gas) + \", km: \" + str(self.km)\n\n    def enter(self):\n        # embarca uma pessoa se houver espa\u00e7o\n        if self.passengers < self.passMax:\n            self.passengers += 1\n        else:\n            print(\"fail: limite de pessoas atingido\")\n\n    def leave(self):\n        # desembarca uma pessoa se houver algu\u00e9m\n        if self.passengers > 0:\n            self.passengers -= 1\n        else:\n            print(\"fail: nao ha ninguem no carro\")\n\n    def fuel(self, amount):\n        # abastece at\u00e9 o m\u00e1ximo; descarta o excesso\n        if amount < 0:\n            return\n        self.gas += amount\n        if self.gas > self.gasMax:\n            self.gas = self.gasMax\n    def drive(self, distance):\n        # dirigir s\u00f3 se houver passageiros e combust\u00edvel\n        if self.passengers == 0:\n            print(\"fail: nao ha ninguem no carro\")\n            return\n\n        if self.gas == 0:\n            print(\"fail: tanque vazio\")\n            return\n\n        # consumo: 1 litro por 1 km\n        if self.gas >= distance:\n            # consegue andar toda a dist\u00e2ncia\n            self.km += distance\n            self.gas -= distance\n        else:\n            # anda o m\u00e1ximo poss\u00edvel e zera o tanque\n            went = self.gas\n            self.km += went\n            self.gas = 0\n            print(\"fail: tanque vazio apos andar \" + str(went) + \" km\")\n\n\ndef main():\n    car = Car()\n    try:\n        while True:\n            line = input()\n            if line is None:\n                break\n            line = line.strip()\n            if line == \"\":\n                continue\n\n            # ecoa o comando como nos testes\n            print(\"$\" + line)\n\n            parts = line.split()\n            cmd = parts[0]\n\n            if cmd == \"end\":\n                break\n\n            elif cmd == \"show\":\n                print(car.toString())\n\n            elif cmd == \"enter\":\n                car.enter()\n\n            elif cmd == \"leave\":\n                car.leave()\n\n            elif cmd == \"fuel\":\n                if len(parts) >= 2:\n                    try:\n                        amount = int(parts[1])\n                    except:\n                        continue\n                    car.fuel(amount)\n\n            elif cmd == \"drive\":\n                if len(parts) >= 2:\n                    try:\n                        dist = int(parts[1])\n                    except:\n                        continue\n                    car.drive(dist)\n\n            else:\n                print(\"fail: comando invalido\")\n\n    except EOFError:\n        # encerra quando n\u00e3o h\u00e1 mais entrada (\u00fatil ao rodar testes)\n        pass\n\n\nif __name__ == \"__main__\":\n    main()",
            "lines": "112"
        }
    ]
}