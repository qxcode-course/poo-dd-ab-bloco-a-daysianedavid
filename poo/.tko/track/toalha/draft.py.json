{
    "patches": [
        {
            "label": "2025-09-16_17-56-36",
            "content": "@@ -1,235 +0,0 @@\n-class Towel:%0A    def __init__ (self, color: str, size: str):%0A        self.color: str = color%0A        self.size: str = size%0A        self.wetness: int = 0%0A%0Avermelha = Towel (%22red%22, %22M%22)%0Aazul = Towel (%22blue%22, %22G%22)%0A%0Aprint (vermelha.color)%0A\n",
            "lines": "0"
        },
        {
            "label": "2025-09-16_18-12-55",
            "content": "@@ -232,51 +232,4 @@\n or)%0A\n-print (vermelha.size)%0Aprint (vermelha.wetness)%0A\n",
            "lines": "10"
        },
        {
            "label": "2025-09-16_18-14-02",
            "content": "@@ -10,23 +10,8 @@\n el:%0A\n-    #contrutor%0A\n     \n",
            "lines": "12"
        },
        {
            "label": "2025-09-16_18-16-06",
            "content": "@@ -166,100 +166,8 @@\n  0%0A%0A\n-    def __str__ (self) -%3E str:%0A        return f%22cor: %7Bself.color%7D, tamanho: %7Bself.size%7D, %22%0A%0A\n verm\n",
            "lines": "13"
        },
        {
            "label": "2025-09-16_18-23-20",
            "content": "@@ -255,31 +255,8 @@\n e%7D, \n-umidade: %7Bself.wetness%7D\n %22%0A%0Av\n",
            "lines": "16"
        },
        {
            "label": "2025-09-16_18-25-35",
            "content": "@@ -279,85 +279,8 @@\n ss%7D%22\n-%0A    %0A    def dry (self, amount: int) -%3E Nome:%0A        self.wetness += amount\n %0A%0Ave\n",
            "lines": "16"
        },
        {
            "label": "2025-09-16_18-27-27",
            "content": "@@ -318,17 +318,17 @@\n t) -%3E No\n-n\n+m\n e:%0A     \n",
            "lines": "19"
        },
        {
            "label": "2025-09-16_18-27-40",
            "content": "@@ -164,85 +164,8 @@\n  = 0\n-%0A    %0A    def dry (self, amount: int) -%3E None:%0A        self.wetness += amount\n %0A%0A  \n@@ -281,16 +281,89 @@\n %7D%22%0A    %0A\n+    def dry (self, amount: int) -%3E None:%0A        self.wetness += amount%0A%0A\n vermelha\n",
            "lines": "19"
        },
        {
            "label": "2025-09-16_18-28-24",
            "content": "@@ -165,484 +165,84 @@\n = 0%0A\n-%0A\n     \n-def getMaxWetness (self) -%3E int: %0A        if self.size == %22P%22:%0A            return 10%0A        elif self.size == %22M%22:%0A            return 20%0A        elif self.size == %22G%22:%0A            return 30%0A        else:%0A            return 0%0A%0A    def dry (self, amount: int) -%3E None:%0A        self.wetness += amount%0A        max_wetness = self.getMaxWetness()%0A        if self.wetness %3E max_wetness:%0A            return (%22toalha encharcada%22)%0A        else:%0A            return (%22toalha seca%22)%0A\n+%0A    def dry (self, amount: int) -%3E None:%0A        self.wetness += amount\n %0A%0A  \n@@ -489,8 +489,5 @@\n ess)\n- %0A%0A\n %0A\n",
            "lines": "19"
        },
        {
            "label": "2025-09-29_18-14-07",
            "content": "@@ -641,80 +641,8 @@\n a%22)%0A\n-        %0A    def wring (self) -%3E None:%0A        self.wetness = 0%0A        \n %0A%0A  \n",
            "lines": "37"
        },
        {
            "label": "2025-09-29_18-29-00",
            "content": "@@ -701,16 +701,24 @@\n ess = 0%0A\n+        \n %0A%0A    de\n@@ -888,16 +888,23 @@\n , %22G%22)%0A%0A\n+print (\n vermelha\n@@ -908,21 +908,21 @@\n lha.\n-dry(15\n+color\n )%0Aprint\n+ \n (ver\n@@ -926,14 +926,43 @@\n vermelha\n+.size)%0Aprint (vermelha.wetness\n )\n-%0A\n  %0A%0A%0A\n",
            "lines": "40"
        },
        {
            "label": "2025-09-29_18-35-03",
            "content": "@@ -898,11 +898,27 @@\n ry(1\n-0)%0A%0A\n+5)%0Aprint(vermelha)%0A \n %0A%0A%0A\n",
            "lines": "40"
        },
        {
            "label": "2025-09-29_18-35-52",
            "content": "@@ -880,23 +880,16 @@\n , %22G%22)%0A%0A\n-print (\n vermelha\n@@ -893,62 +893,15 @@\n lha.\n-color)%0Aprint (vermelha.size)%0Aprint (vermelha.wetness)%0A\n+dry(10)\n %0A%0A%0A%0A\n",
            "lines": "40"
        },
        {
            "label": "2025-09-29_18-39-13",
            "content": "@@ -955,44 +955,8 @@\n s)%0A%0A\n-vermelha.dry(15)%0Aprint (vermelha)%0A%0A%0A\n %0A%0A%0A%0A\n",
            "lines": "43"
        },
        {
            "label": "2025-09-29_18-40-12",
            "content": "@@ -964,18 +964,18 @@\n lha.dry(\n-30\n+15\n )%0Aprint \n",
            "lines": "47"
        },
        {
            "label": "2025-09-29_18-45-01",
            "content": "@@ -1,38 +1,31 @@\n-Toalha Towel%0A%C2%B7 python%0Aclass Towel:\n+class Towel:%0A    #contrutor\n %0A   \n@@ -35,818 +35,493 @@\n f __\n-str\n+init\n __\n+ \n (self\n-) -%3E str:%0A        return f%22%7Bself.color%7D %7Bself.size%7D %7Bself.wetness%7D%22%0A%0A%0A%0A%0A# === Testes simples para voc%C3%AA executar e estudar ===%0Aif __name__ == %22__main__%22:%0A    # primeiro exemplo usando seus objetos%0A    vermelha = Towel(%22red%22, %22M%22)%0A    azul = Towel(%22blue%22, %22G%22)%0A%0A%0A    # mostra atributos iniciais%0A    print(%22Inicial:%22)%0A    print(vermelha.color)%0A    print(vermelha.size)%0A    print(vermelha.wetness)%0A    print()%0A%0A%0A    # exemplo 1: secar, verificar limites e torcer%0A    print(%22Exemplo 1: secar e limitar%22)%0A    vermelha.show()\n+, color: str, size: str):%0A        self.color: str = color%0A        self.size: str = size%0A        self.wetness: int = 0%0A%0A    def getMaxWetness (self) -%3E int: %0A        if self.size == %22P%22:%0A            return 10%0A        elif self.size == %22M%22:%0A            return 20%0A        elif self.size == %22G%22:%0A    \n        \n- #\n  re\n-d M 0%0A    vermelha.dry(5)%0A    vermelha.show()        # red M 5%0A    print(vermelha.isDry())%0A    vermelha.dry(20)       # ultrapassa m%C3%A1ximo -%3E deve avisar e ficar no m%C3%A1ximo (M -%3E 20)%0A    vermelha.show()        # red M 20%0A    vermelha.wringOut()%0A    vermelha.show\n+turn 30%0A        else:%0A            return 0%0A%0A    def dry (self, amount: int) -%3E None:%0A        self.wetness += amount%0A        max_wetness = self.getMaxWetness\n ()\n+%0A\n         \n # re\n@@ -520,198 +520,137 @@\n     \n-# red M 0%0A    print()%0A%0A%0A    # exemplo 2: toalha grande%0A    print(%22Exemplo 2: toalha G%22)%0A    azul.show()            # blue G 0%0A    print(azul.isDry())%0A    azul.dry(30)%0A    azul.show()\n+if self.wetness %3E max_wetness:%0A            return (%22toalha encharcada%22)%0A        else:%0A            return (%22toalha seca%22)%0A\n         \n     \n@@ -649,281 +649,201 @@\n     \n+%0A\n     \n-# blue G 30%0A    print(azul.isDry())%0A    azul.dry(1)            # deve imprimir 'toalha encharcada' e permanecer 30%0A    azul.show()%0A%0A%0A    # exemplo 3: teste autom%C3%A1tico com assert (opcional para estudar)%0A    print() %0A    print(%22Testes autom%C3%A1ticos (assert)%22)%0A    t\n+def wring (self) -%3E None:%0A        self.wetness = 0%0A%0A%0A    def __str__ (self) -%3E str:%0A        return f%22cor: %7Bself.color%7D, tamanho: %7Bself.size%7D, umidade: %7Bself.wetness%7D%22%0A    %0Avermelha\n  = Towel\n (%22Am\n@@ -842,255 +842,157 @@\n owel\n+ \n (%22\n-Amarela\n+red\n %22, %22\n-P%22)%0A    assert t.getMaxWetness() == 10%0A    t.dry(10)%0A    assert t.wetness == 10%0A    t.dry(5)               # encharca, permanece em 10%0A    assert t.wetness == 10%0A    t.wringOut()%0A    assert t.isDry()%0A    print(%22Todos os asserts passaram%22)\n+M%22)%0Aazul = Towel (%22blue%22, %22G%22)%0A%0Aprint (vermelha.color)%0Aprint (vermelha.size)%0Aprint (vermelha.wetness)%0A%0Avermelha.dry(30)%0Aprint (vermelha)%0A%0A%0A%0A%0A%0A%0A\n",
            "lines": "47"
        },
        {
            "label": "2025-09-30_18-24-36",
            "content": "@@ -1,815 +1,2825 @@\n-class Toalha:%0A    def __init__(\n+@@ -1,838 +1,1569 @@%0A-class Towel:%250Aif self.size == %2522P%2522:%250Areturn 10%250Aif \n self\n-, \n+.\n size\n-):%0A        # O atributo size guarda o tamanho da toalha (%22P%22, %22M%22 ou %22G%22)%0A        self.size = size%0A%0A    def getMaxWetness(self):%0A        # Dicion%C3%A1rio que relaciona o tamanho da toalha com a capacidade m%C3%A1xima de umidade%0A        limites = %7B%22P%22: 10, %22M%22: 20, %22G%22: 30%7D%0A        %0A        # .get(self.size, 0) procura no dicion%C3%A1rio o valor correspondente ao tamanho%0A        # Se n%C3%A3o encontrar (ex: tamanho inv%C3%A1lido), retorna 0%0A        return limites.get(self.size, 0)%0A%0A%0A# Exemplo de uso%0Atoalha1 = Toalha(%22P%22)   # cria uma toalha pequena%0Aprint(toalha1.getMaxWetness())  # sa%C3%ADda: 10%0A%0Atoalha2 = Toalha(%22M%22)   # cria uma toalha m%C3%A9dia%0Aprint(toalha2.getMaxWetness())  # sa%C3%ADda: 20%0A%0Atoalha3 = Toalha(%22X%22)   # cria uma toalha com tamanho inv%C3%A1lido%0Aprint(toalha3.getMaxWetness())  # sa%C3%ADda: 0\n+ == %2522M%2522:%250Areturn 20%250Aif self.size == %2522G%2522:%250Areturn 30%250Areturn 0%250A%250A%250Adef dry(self, amount: int) -%253E None:%250A# aumenta a umidade e limita ao m%25C3%25A1ximo; avisa se encharcou%250Aself.wetness += amount%250Amax_w = self.getMaxWetness()%250Aif self.wetness %253E max_w:%250Aprint(%2522toalha encharcada%2522)%250Aself.wetness = max_w%250A%250A%250Adef wringOut(self) -%253E None:%250A# torce a toalha, zera a umidade%250Aself.wetness = 0%250A%250A%250Adef isDry(self) -%253E bool:%250A# retorna True se estiver seca (umidade 0)%250Areturn self.wetness == 0%250A%250A%250Adef show(self) -%253E None:%250A# mostra representa%25C3%25A7%25C3%25A3o amig%25C3%25A1vel%250Aprint(self)%250A%250A%250Adef __str__(self) -%253E str:%250Areturn f%2522%257Bself.color%257D %257Bself.size%257D %257Bself.wetness%257D%2522%250A%250A%250A%250A%250A# === Testes simples para voc%25C3%25AA executar e estudar ===%250Aif __name__ == %2522__main__%2522:%250A# primeiro exemplo usando seus objetos%250Avermelha = Towel(%2522red%2522, %2522M%2522)%250Aazul = Towel(%2522blue%2522, %2522G%0A+Toalha Towel%250A%25C2%25B7 python%250Aclass Towel:%250A    def __str__(self) -%253E str:%250A        return f%2522%257Bself.color%257D %257Bself.size%257D %257Bself.wetness%257D%2522%250A%250A%250A%250A%250A# === Testes simples para voc%25C3%25AA executar e estudar ===%250Aif __name__ == %2522__main__%2522:%250A    # primeiro exemplo usando seus objetos%250A    vermelha = Towel(%2522red%2522, %2522M%2522)%250A    azul = Towel(%2522blue%2522, %2522G%2522)%250A%250A%250A    # mostra atributos iniciais%250A    print(%2522Inicial:%2522)%250A    print(vermelha.color)%250A    print(vermelha.size)%250A    print(vermelha.wetness)%250A    print()%250A%250A%250A    # exemplo 1: secar, verificar limites e torcer%250A    print(%2522Exemplo 1: secar e limitar%2522)%250A    vermelha.show()        # red M 0%250A    vermelha.dry(5)%250A    vermelha.show()        # red M 5%250A    print(vermelha.isDry())%250A    vermelha.dry(20)       # ultrapassa m%25C3%25A1ximo -%253E deve avisar e ficar no m%25C3%25A1ximo (M -%253E 20)%250A    vermelha.show()        # red M 20%250A    vermelha.wringOut()%250A    vermelha.show()        # red M 0%250A    print()%250A%250A%250A    # exemplo 2: toalha grande%250A    print(%2522Exemplo 2: toalha G%2522)%250A    azul.show()            # blue G 0%250A    print(azul.isDry())%250A    azul.dry(30)%250A    azul.show()            # blue G 30%250A    print(azul.isDry())%250A    azul.dry(1)            # deve imprimir 'toalha encharcada' e permanecer 30%250A    azul.show()%250A%250A%250A    # exemplo 3: teste autom%25C3%25A1tico com assert (opcional para estudar)%250A    print() %250A    print(%2522Testes autom%25C3%25A1ticos (assert)%2522)%250A    t = Towel(%2522Amarela%2522, %2522P%2522)%250A    assert t.getMaxWetness() == 10%250A    t.dry(10)%250A    assert t.wetness == 10%250A    t.dry(5)               # encharca, permanece em 10%250A    assert t.wetness == 10%250A    t.wringOut()%250A    assert t.isDry()%250A    print(%2522Todos os asserts passaram%0A %2522)\n %0A\n",
            "lines": "4"
        },
        {
            "label": "2025-09-30_18-26-03",
            "content": "@@ -1,17 +1,46 @@\n-clas\n+@@ -5,28 +5,14 @@%0A \n s To\n+%0A-\n wel\n-:\n %0A\n++alha%0A :%250A%0A-\n     \n@@ -53,33 +53,55 @@\n utor\n+%250A\n %0A    \n-def __init__\n+ %0A@@ -27,71 +27,92 @@%0A it__%0A- %0A\n  (self, \n colo\n@@ -96,16 +96,18 @@\n  (self, \n+%0A-\n color: s\n@@ -121,17 +121,19 @@\n e: str):\n-%0A\n+%250A\n         \n@@ -160,38 +160,153 @@\n lor%0A\n-        self.\n++size):%250A        # O atributo size guarda o tamanho da toalha (%2522P%2522, %2522M%2522 ou %2522G%2522)%0A %250A   %0A@@ -129,50 +129,15 @@%0A \n size\n+%0A-\n : str\n+%0A \n  = size%0A\n     \n@@ -301,16 +301,20 @@\n  = size%0A\n+-%250A\n         \n@@ -339,47 +339,73 @@\n = 0%0A\n-%0A    def getMaxWetness (self) -%3E\n+ %250A%250A  %0A@@ -159,75 +159,105 @@%0A ness%0A- %0A (self)%0A- -%253E\n  int: \n-%0A\n+%250A\n     \n@@ -428,13 +428,19 @@\n  == \n-%22P%22:%0A\n+%2522P%2522:%250A\n     \n@@ -457,24 +457,29 @@\n turn 10%0A\n++:%250A\n         \n elif sel\n@@ -462,35 +462,168 @@\n 10%0A+:%250A        \n-eli\n+# Dicion%25C3%25A1rio que relaciona o tamanho da toalha com a capacidade m%25C3%25A1xima de umidade%0A %250A   %0A@@ -265,52 +265,54 @@%0A     %0A-e%0A li%0A-\n f self.size == %22\n@@ -625,13 +625,19 @@\n  == \n-%22M%22:%0A\n+%2522M%2522:%250A\n     \n@@ -658,39 +658,176 @@\n  20%0A\n-        elif self.\n++mites = %257B%2522P%2522: 10, %2522M%2522: 20, %2522G%2522: 30%257D%250A        %0A %250A   %0A@@ -320,13 +320,15 @@%0A     %0A-elif %0A+# .get(%0A self%0A@@ -336,662 +336,480 @@%0A \n size\n+%0A-\n  == \n-%22G%22:%0A\n+%2522G%2522:%250A\n     \n@@ -843,17 +843,19 @@\n eturn 30\n-%0A\n+%250A\n         \n@@ -851,33 +851,35 @@\n %250A        else:\n-%0A\n+%250A\n             retu\n@@ -882,18 +882,22 @@\n return 0\n-%0A%0A\n+%250A%250A\n     def \n@@ -921,24 +921,28 @@\n : int) -\n-%3E\n+%253E\n  None:\n-%0A\n+%250A\n         \n@@ -963,17 +963,19 @@\n = amount\n-%0A\n+%250A\n         \n@@ -1008,17 +1008,19 @@\n etness()\n-%0A\n+%250A\n         \n@@ -1035,17 +1035,19 @@\n wetness \n-%3E\n+%253E\n  max_wet\n@@ -1051,17 +1051,19 @@\n wetness:\n-%0A\n+%250A\n         \n@@ -1070,25 +1070,27 @@\n     return (\n-%22\n+%2522\n toalha encha\n@@ -1094,19 +1094,23 @@\n charcada\n-%22)%0A\n+%2522)%250A\n         \n@@ -1114,17 +1114,19 @@\n    else:\n-%0A\n+%250A\n         \n@@ -1137,17 +1137,19 @@\n return (\n-%22\n+%2522\n toalha s\n@@ -1155,19 +1155,23 @@\n seca\n-%22)%0A\n+%2522)%250A\n         \n %0A   \n@@ -1166,17 +1166,19 @@\n         \n-%0A\n+%250A\n     def \n@@ -1195,16 +1195,20 @@\n f) -\n-%3E\n+%253E\n  None:\n-%0A\n+%250A\n     \n@@ -1227,18 +1227,22 @@\n ness = 0\n-%0A%0A\n+%250A%250A\n     def \n@@ -1261,15 +1261,19 @@\n f) -\n-%3E\n+%253E\n  str:\n-%0A\n+%250A\n     \n@@ -1288,15 +1288,19 @@\n rn f\n-%22\n+%2522\n cor: \n-%7B\n+%257B\n self\n@@ -1305,17 +1305,19 @@\n lf.color\n-%7D\n+%257D\n , tamanh\n@@ -1319,17 +1319,19 @@\n amanho: \n-%7B\n+%257B\n self.siz\n@@ -1331,17 +1331,19 @@\n elf.size\n-%7D\n+%257D\n , umidad\n@@ -1349,9 +1349,11 @@\n de: \n-%7B\n+%257B\n self\n@@ -1364,46 +1364,510 @@\n ness\n-%7D%22%0A    %0Averme\n+%257D%2522%250A    %250Averme%0A+, 0) procura no dicion%25C3%25A1rio o valor correspondente ao tamanho%250A        # Se n%25C3%25A3o encontrar (ex: tamanho inv%25C3%25A1lido), retorna 0%250A        return limites.get(self.size, 0)%250A%250A%250A# Exemplo de uso%250Atoa\n lha\n+1\n  = To\n-wel (%22red%22, %22M%22)%0A\n+alha(%2522P%2522)   # cria uma toalha pequena%250Aprint(toalha1.getMaxWetness())  # sa%25C3%25ADda: 10%250A%250Atoalha2 = Toalha(%2522M%2522)   # cria uma toalha m%25C3%25A9dia%250Aprint(toalha2.getMaxWetness())  # sa%25C3%25ADda: 20%250A%250Atoa%0A lha%0A+3%0A  = To%0A-wel (%2522red%2522, %2522M%2522)%250A\n azul\n@@ -1880,22 +1880,34 @@\n el (\n-%22\n+%2522\n blue\n-%22, %22G%22)%0A%0A\n+%2522, %2522G%2522)%250A%250A\n prin\n@@ -1924,17 +1924,19 @@\n a.color)\n-%0A\n+%250A\n print (v\n@@ -1948,17 +1948,19 @@\n ha.size)\n-%0A\n+%250A\n print (v\n@@ -1975,18 +1975,22 @@\n wetness)\n-%0A%0A\n+%250A%250A\n vermelha\n@@ -1997,17 +1997,19 @@\n .dry(30)\n-%0A\n+%250A\n print (v\n@@ -2017,9 +2017,124 @@\n rmelha)%0A\n++alha(%2522X%2522)   # cria uma toalha com tamanho inv%25C3%25A1lido%250Aprint(toalha3.getMaxWetness())  # sa%25C3%25ADda: 0%0A %250A\n %0A\n",
            "lines": "49"
        },
        {
            "label": "2025-10-05_14-20-22",
            "content": "class Towel:\n    #contrutor\n    def __init__ (self, color: str, size: str):\n        self.color: str = color\n        self.size: str = size\n        self.wetness: int = 0\n\n    def getMaxWetness (self) -> int: \n        if self.size == \"P\":\n            return 10\n        elif self.size == \"M\":\n            return 20\n        elif self.size == \"G\":\n            return 30\n        else:\n            return 0\n\n    def dry (self, amount: int) -> None:\n        self.wetness += amount\n        max_wetness = self.getMaxWetness()\n        if self.wetness > max_wetness:\n            return (\"toalha encharcada\")\n        else:\n            return (\"toalha seca\")\n        \n    def wring (self) -> None:\n        self.wetness = 0\n\n    def __str__ (self) -> str:\n        return f\"cor: {self.color}, tamanho: {self.size}, umidade: {self.wetness}\"\n    \nvermelha = Towel (\"red\", \"M\")\nazul = Towel (\"blue\", \"G\")\n\nprint (vermelha.color)\nprint (vermelha.size)\nprint (vermelha.wetness)\n\nvermelha.dry(30)\nprint (vermelha)\n\n",
            "lines": "41"
        }
    ]
}